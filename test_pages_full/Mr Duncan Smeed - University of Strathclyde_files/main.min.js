!
function (t) {
    function s(s, n) {
        var a = 0;
        s.each(function () {
            var s = t(this).outerHeight(!0);
            s > a && (a = s)
        }), n && (s = t("> *", s)), s.css("min-height", a)
    }
    function n(t, s) {
        1 == t && s.addClass("single")
    }
    function a(s, n) {
        for (var a = s; a--;) n.append('<div class="column">');
        t("> .column:first", n).addClass("first"), t("> .column:last", n).addClass("last");
        var i = 0,
            e = 0,
            o = t("> section", n).length / s;
        t("> section", n).each(function () {
            i >= o && (e++, i = 0), t(this).appendTo(t(".column")[e]), i++
        })
    }
    function i(s) {
        s.each(function () {
            t("> .group .contacts", this).hide(), t("> .group:first .contacts", this).show(), t("> .group:first", this).addClass("active"), $thiscontainer = t(this), t("> .group:not(.active) > h1", this).on("click", function () {
                t("> .group.active .contacts", $thiscontainer).slideUp("fast"), t("> .group.active", $thiscontainer).removeClass("active"), $thish1 = t(this), t(this).closest(".group").children(".contacts").slideDown("fast", function () {
                    t("html, body").animate({
                        scrollTop: $thish1.offset().top - t(".headerbar").height()
                    }, "fast")
                }), t(this).closest(".group").addClass("active")
            })
        })
    }
    function e(s) {
        s.each(function () {
			var tabs = t(this).find('li');
			//tabs.first().addClass("active");
			var tab =  $(tabs[1]);
			tab.addClass('active');//Set first tab to be active
            console.log(tab);
			
			var id = tab.find('a').attr('data-tab');
			t("#" + id, s).addClass("active");

            t(".tabs > li > a", s).on("click", function (n) {
                n.preventDefault();
                var a = t(this).attr("data-tab");
                t(".tabs > li", s).removeClass("active"), t(".tab-content", s).removeClass("active"), t(this).parent().addClass("active"), t("#" + a, s).addClass("active")
            })
        })
    }
    function o() {
        t(window).scroll(function () {
			var width = (window.innerWidth > 0) ? window.innerWidth : screen.width;
			if(width > 1024) {
				t(this).scrollTop() > 105 ? t('header[role="banner"]').addClass("tethered") : t('header[role="banner"]').removeClass("tethered")
			}
        })
    }

function tabs($container) {
                                          $container.each(function() {                              
                                                var cur_container = $(this); //for scope in event functions
                                                var tabs = cur_container.find('li'); //Get all <li>s from this containerAG
                                                console.log('Tabs: ' + tabs.length);
                                                console.log("WORKING 1");
                                                $(tabs[1]).addClass('active');//Set first tab to be active
                                                console.log(tabs[1]);
                                                //Now add click event to all <li>s
                                                tabs.each(function(){
                                                                var cur_tab = $(this);
                                                                cur_tab.on('click', function(e) {
                                                                                e.preventDefault();
                                                                                
                                                                                console.log("Activating tab!");
                                                                                
                                                                                cur_container.find('.active').removeClass('active');//remove class from currently active tab
                                                                                cur_tab.addClass('active');//add class to newly activated tab
                                                                                
                                                                }); //end click event
                                                }); //end tabs loop
                                }); //end container loop
                 }

    function l() {
        t(document).one("mousemove", function () {
            t('.no-touch header[role="banner"] nav.primarynav > ul > li.haschildren').hoverIntent({
                over: function () {
                    t('header[role="banner"] nav.primarynav > ul > li.haschildren > .subnav').hide(), "right" != t('header[role="banner"] .primarynav > ul').css("float") && t("> .subnav", this).stop().slideDown("fast");
				},
                out: function () {
                    t("> .subnav", this).stop().slideUp("fast");
                }
            })
        }), $pnavli = '.touch header[role="banner"] nav.primarynav > ul > li.haschildren', t($pnavli).bind("touchstart", function (s) {
			var width = (window.innerWidth > 0) ? window.innerWidth : screen.width;
			if(width > 680) {
				t("> .subnav", this).is(":hidden") && (
					s.preventDefault(),
					s.stopPropagation(), 
					t("> .subnav", $pnavli).hide(),
					t("> .subnav", this).stop().slideDown("fast"),
					t("> .subnav", this).prepend('<span class="close">~</span>'),
				
					$('.close-header').css('display', 'block'),
					$('.close-header').one('click', function(e) {
						e.preventDefault();
						 t("> .subnav", this).stop().slideUp("fast");
						 $(this).css('display', 'none');
					}),
					
					t("> .subnav .close", this).bind("touchstart", function (s) {
						s.preventDefault(), 
						s.stopPropagation(),
						t("> .subnav", $pnavli).stop().slideUp("fast"),
						t(this).remove(),
						$('.close-header').css('display', 'none')
					}),
				
					t("html").on("touchstart", function (s) {
						0 === t($pnavli).has(s.target).length && (
						t("> .subnav", $pnavli).stop().slideUp("fast"),
						t("> .subnav .close", $pnavli).remove(),
						t(this).off(s)),
						$('.close-header').css('display', 'none')
					})
				)
			}
        })
    }
    t(document).ready(function () {
        t(".sub-nav li:not(:has(a))").text(""), t("img").removeAttr("style"), a(3, t('.no-csscolumns footer[role="contentinfo"] > .wrap')), a(3, t(".no-csscolumns .discover > .wrap")), i(t(".contact-table")), e(t(".tabs-container")), l(), o()
    }), t(window).load(function () {
        t(".flexslider:not(.thumbs, .has-thumbs, .thumbsimg, .has-thumbsimg)").each(function () {
            maxItems = t(this).data("max"), maxItems > 1 ? t(this).flexslider({
                animation: "slide",
                animationLoop: !1,
                slideshow: !1,
                itemWidth: 250,
                itemMargin: 0,
                minItems: 1,
                maxItems: maxItems,
                start: function (t) {
                    s(t.slides, !0), n(t.count, t)
                }
            }) : t(this).flexslider({
                slideshow: !1,
                start: function (t) {
                    n(t.count, t)
                }
            })
        }), t(".flexslider.thumbs li").wrapInner("<div>"), t(".flexslider.thumbs").flexslider({
            animation: "slide",
            controlNav: !1,
            animationLoop: !1,
            slideshow: !1,
            itemWidth: 250,
            itemMargin: 0,
            minItems: 2,
            asNavFor: ".has-thumbs"
        }), t(".flexslider.has-thumbs").flexslider({
            animation: "fade",
            controlNav: !1,
            directionNav: !1,
            animationLoop: !1,
            slideshow: !1,
            sync: ".thumbs"
        }), t(".flexslider.thumbsimg").flexslider({
            animation: "slide",
            controlNav: !1,
            animationLoop: !1,
            slideshow: !1,
            itemWidth: 150,
            itemMargin: 0,
            minItems: 5,
            asNavFor: ".has-thumbsimg"
        }), t(".flexslider.has-thumbsimg").flexslider({
            animation: "fade",
            controlNav: !1,
            directionNav: !1,
            animationLoop: !1,
            slideshow: !1,
            sync: ".thumbsimg"
        }), s(t(".related-link-panel .related-link.half"))
    })
}(jQuery);// HIDE MAX LIST ITEMS JQUERY PLUGIN
// Version: 1.34
// Author: www.joshuawinn.com
// Usage: Free and Open Source. WTFPL: http://sam.zoy.org/wtfpl/
(function($){
$.fn.extend({ 
hideMaxListItems: function(options) 
{
	// DEFAULT VALUES
	var defaults = {
		max: 3,
		speed: 1000,
		moreText:'More related courses',
		lessText:'Less',
		moreHTML:'<p class="maxlist-more"><a href="#"></a></p>', // requires class and child <a>
	};
	var options =  $.extend(defaults, options);
	
	// FOR EACH MATCHED ELEMENT
	return this.each(function() {
		var op = options;
		var totalListItems = $(this).children("li").length;
		var speedPerLI;
		
		// Get animation speed per LI; Divide the total speed by num of LIs. 
		// Avoid dividing by 0 and make it at least 1 for small numbers.
		if ( totalListItems > 0 && op.speed > 0  ) { 
			speedPerLI = Math.round( op.speed / totalListItems );
			if ( speedPerLI < 1 ) { speedPerLI = 1; }
		} else { 
			speedPerLI = 0; 
		}
		
		// If list has more than the "max" option
		if ( (totalListItems > 0) && (totalListItems > op.max) )
		{
			// Initial Page Load: Hide each LI element over the max
			$(this).children("li").each(function(index) {
				if ( (index+1) > op.max ) {
					$(this).hide(0);
					$(this).addClass('maxlist-hidden');
				}
			});
			// Replace [COUNT] in "moreText" or "lessText" with number of items beyond max
			var howManyMore = totalListItems - op.max;
			var newMoreText = op.moreText;
			var newLessText = op.lessText;
			
			if (howManyMore > 0){
				newMoreText = newMoreText.replace("[COUNT]", howManyMore);
				newLessText = newLessText.replace("[COUNT]", howManyMore);
			}
			// Add "Read More" button
			$(this).after(op.moreHTML);
			// Add "Read More" text
			$(this).next(".maxlist-more").children("a").text(newMoreText);
			
			// Click events on "Read More" button: Slide up and down
			$(this).next(".maxlist-more").children("a").click(function(e)
			{
				// Get array of children past the maximum option 
				var listElements = $(this).parent().prev("ul, ol").children("li"); 
				listElements = listElements.slice(op.max);
				
				// Sequentially slideToggle the list items
				// For more info on this awesome function: http://goo.gl/dW0nM
				if ( $(this).text() == newMoreText ){
					$(this).text(newLessText);
					var i = 0; 
					(function() { $(listElements[i++] || []).slideToggle(speedPerLI,arguments.callee); })();
				} 
				else {			
					$(this).text(newMoreText);
					var i = listElements.length - 1; 
					(function() { $(listElements[i--] || []).slideToggle(speedPerLI,arguments.callee); })();
				}
				
				// Prevent Default Click Behavior (Scrolling)
				e.preventDefault();
			});
		}
	});
}
});
})(jQuery); // End jQuery Plugin// JavaScript Document